// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-team-api/ocp-team-api.proto

package ocp_team_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateTeamV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTeamV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		return CreateTeamV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 255 {
		return CreateTeamV1RequestValidationError{
			field:  "Description",
			reason: "value length must be at most 255 runes",
		}
	}

	return nil
}

// CreateTeamV1RequestValidationError is the validation error returned by
// CreateTeamV1Request.Validate if the designated constraints aren't met.
type CreateTeamV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamV1RequestValidationError) ErrorName() string {
	return "CreateTeamV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamV1RequestValidationError{}

// Validate checks the field values on CreateTeamV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTeamV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateTeamV1ResponseValidationError is the validation error returned by
// CreateTeamV1Response.Validate if the designated constraints aren't met.
type CreateTeamV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamV1ResponseValidationError) ErrorName() string {
	return "CreateTeamV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamV1ResponseValidationError{}

// Validate checks the field values on MultiCreateTeamV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTeamV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTeams()) < 2 {
		return MultiCreateTeamV1RequestValidationError{
			field:  "Teams",
			reason: "value must contain at least 2 item(s)",
		}
	}

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateTeamV1RequestValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateTeamV1RequestValidationError is the validation error returned by
// MultiCreateTeamV1Request.Validate if the designated constraints aren't met.
type MultiCreateTeamV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTeamV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTeamV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTeamV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTeamV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTeamV1RequestValidationError) ErrorName() string {
	return "MultiCreateTeamV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTeamV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTeamV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTeamV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTeamV1RequestValidationError{}

// Validate checks the field values on MultiCreateTeamV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateTeamV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreateTeamV1ResponseValidationError is the validation error returned by
// MultiCreateTeamV1Response.Validate if the designated constraints aren't met.
type MultiCreateTeamV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateTeamV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateTeamV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateTeamV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateTeamV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateTeamV1ResponseValidationError) ErrorName() string {
	return "MultiCreateTeamV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateTeamV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateTeamV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateTeamV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateTeamV1ResponseValidationError{}

// Validate checks the field values on GetTeamV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTeamV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetTeamV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetTeamV1RequestValidationError is the validation error returned by
// GetTeamV1Request.Validate if the designated constraints aren't met.
type GetTeamV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamV1RequestValidationError) ErrorName() string { return "GetTeamV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamV1RequestValidationError{}

// Validate checks the field values on GetTeamV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTeamV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeamV1ResponseValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTeamV1ResponseValidationError is the validation error returned by
// GetTeamV1Response.Validate if the designated constraints aren't met.
type GetTeamV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamV1ResponseValidationError) ErrorName() string {
	return "GetTeamV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamV1ResponseValidationError{}

// Validate checks the field values on ListTeamsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTeamsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		return ListTeamsV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
	}

	// no validation rules for Offset

	return nil
}

// ListTeamsV1RequestValidationError is the validation error returned by
// ListTeamsV1Request.Validate if the designated constraints aren't met.
type ListTeamsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamsV1RequestValidationError) ErrorName() string {
	return "ListTeamsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamsV1RequestValidationError{}

// Validate checks the field values on ListTeamsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTeamsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamsV1ResponseValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTeamsV1ResponseValidationError is the validation error returned by
// ListTeamsV1Response.Validate if the designated constraints aren't met.
type ListTeamsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamsV1ResponseValidationError) ErrorName() string {
	return "ListTeamsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamsV1ResponseValidationError{}

// Validate checks the field values on RemoveTeamV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTeamV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveTeamV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveTeamV1RequestValidationError is the validation error returned by
// RemoveTeamV1Request.Validate if the designated constraints aren't met.
type RemoveTeamV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamV1RequestValidationError) ErrorName() string {
	return "RemoveTeamV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamV1RequestValidationError{}

// Validate checks the field values on RemoveTeamV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTeamV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveTeamV1ResponseValidationError is the validation error returned by
// RemoveTeamV1Response.Validate if the designated constraints aren't met.
type RemoveTeamV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamV1ResponseValidationError) ErrorName() string {
	return "RemoveTeamV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamV1ResponseValidationError{}

// Validate checks the field values on UpdateTeamV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTeamV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTeamV1RequestValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTeamV1RequestValidationError is the validation error returned by
// UpdateTeamV1Request.Validate if the designated constraints aren't met.
type UpdateTeamV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamV1RequestValidationError) ErrorName() string {
	return "UpdateTeamV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamV1RequestValidationError{}

// Validate checks the field values on UpdateTeamV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTeamV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTeamV1ResponseValidationError is the validation error returned by
// UpdateTeamV1Response.Validate if the designated constraints aren't met.
type UpdateTeamV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamV1ResponseValidationError) ErrorName() string {
	return "UpdateTeamV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamV1ResponseValidationError{}

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Team) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return TeamValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 100 {
		return TeamValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 255 {
		return TeamValidationError{
			field:  "Description",
			reason: "value length must be at most 255 runes",
		}
	}

	return nil
}

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}
