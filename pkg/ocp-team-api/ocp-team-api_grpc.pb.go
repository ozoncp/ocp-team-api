// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_team_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTeamApiClient is the client API for OcpTeamApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTeamApiClient interface {
	CreateTeamV1(ctx context.Context, in *CreateTeamV1Request, opts ...grpc.CallOption) (*CreateTeamV1Response, error)
	MultiCreateTeamV1(ctx context.Context, in *MultiCreateTeamV1Request, opts ...grpc.CallOption) (*MultiCreateTeamV1Response, error)
	GetTeamV1(ctx context.Context, in *GetTeamV1Request, opts ...grpc.CallOption) (*GetTeamV1Response, error)
	ListTeamsV1(ctx context.Context, in *ListTeamsV1Request, opts ...grpc.CallOption) (*ListTeamsV1Response, error)
	RemoveTeamV1(ctx context.Context, in *RemoveTeamV1Request, opts ...grpc.CallOption) (*RemoveTeamV1Response, error)
	UpdateTeamV1(ctx context.Context, in *UpdateTeamV1Request, opts ...grpc.CallOption) (*UpdateTeamV1Response, error)
}

type ocpTeamApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTeamApiClient(cc grpc.ClientConnInterface) OcpTeamApiClient {
	return &ocpTeamApiClient{cc}
}

func (c *ocpTeamApiClient) CreateTeamV1(ctx context.Context, in *CreateTeamV1Request, opts ...grpc.CallOption) (*CreateTeamV1Response, error) {
	out := new(CreateTeamV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/CreateTeamV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTeamApiClient) MultiCreateTeamV1(ctx context.Context, in *MultiCreateTeamV1Request, opts ...grpc.CallOption) (*MultiCreateTeamV1Response, error) {
	out := new(MultiCreateTeamV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/MultiCreateTeamV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTeamApiClient) GetTeamV1(ctx context.Context, in *GetTeamV1Request, opts ...grpc.CallOption) (*GetTeamV1Response, error) {
	out := new(GetTeamV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/GetTeamV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTeamApiClient) ListTeamsV1(ctx context.Context, in *ListTeamsV1Request, opts ...grpc.CallOption) (*ListTeamsV1Response, error) {
	out := new(ListTeamsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/ListTeamsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTeamApiClient) RemoveTeamV1(ctx context.Context, in *RemoveTeamV1Request, opts ...grpc.CallOption) (*RemoveTeamV1Response, error) {
	out := new(RemoveTeamV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/RemoveTeamV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTeamApiClient) UpdateTeamV1(ctx context.Context, in *UpdateTeamV1Request, opts ...grpc.CallOption) (*UpdateTeamV1Response, error) {
	out := new(UpdateTeamV1Response)
	err := c.cc.Invoke(ctx, "/ocp.team.api.OcpTeamApi/UpdateTeamV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTeamApiServer is the server API for OcpTeamApi service.
// All implementations must embed UnimplementedOcpTeamApiServer
// for forward compatibility
type OcpTeamApiServer interface {
	CreateTeamV1(context.Context, *CreateTeamV1Request) (*CreateTeamV1Response, error)
	MultiCreateTeamV1(context.Context, *MultiCreateTeamV1Request) (*MultiCreateTeamV1Response, error)
	GetTeamV1(context.Context, *GetTeamV1Request) (*GetTeamV1Response, error)
	ListTeamsV1(context.Context, *ListTeamsV1Request) (*ListTeamsV1Response, error)
	RemoveTeamV1(context.Context, *RemoveTeamV1Request) (*RemoveTeamV1Response, error)
	UpdateTeamV1(context.Context, *UpdateTeamV1Request) (*UpdateTeamV1Response, error)
	mustEmbedUnimplementedOcpTeamApiServer()
}

// UnimplementedOcpTeamApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTeamApiServer struct {
}

func (UnimplementedOcpTeamApiServer) CreateTeamV1(context.Context, *CreateTeamV1Request) (*CreateTeamV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) MultiCreateTeamV1(context.Context, *MultiCreateTeamV1Request) (*MultiCreateTeamV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateTeamV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) GetTeamV1(context.Context, *GetTeamV1Request) (*GetTeamV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) ListTeamsV1(context.Context, *ListTeamsV1Request) (*ListTeamsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamsV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) RemoveTeamV1(context.Context, *RemoveTeamV1Request) (*RemoveTeamV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) UpdateTeamV1(context.Context, *UpdateTeamV1Request) (*UpdateTeamV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamV1 not implemented")
}
func (UnimplementedOcpTeamApiServer) mustEmbedUnimplementedOcpTeamApiServer() {}

// UnsafeOcpTeamApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTeamApiServer will
// result in compilation errors.
type UnsafeOcpTeamApiServer interface {
	mustEmbedUnimplementedOcpTeamApiServer()
}

func RegisterOcpTeamApiServer(s grpc.ServiceRegistrar, srv OcpTeamApiServer) {
	s.RegisterService(&OcpTeamApi_ServiceDesc, srv)
}

func _OcpTeamApi_CreateTeamV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).CreateTeamV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/CreateTeamV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).CreateTeamV1(ctx, req.(*CreateTeamV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTeamApi_MultiCreateTeamV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateTeamV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).MultiCreateTeamV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/MultiCreateTeamV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).MultiCreateTeamV1(ctx, req.(*MultiCreateTeamV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTeamApi_GetTeamV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).GetTeamV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/GetTeamV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).GetTeamV1(ctx, req.(*GetTeamV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTeamApi_ListTeamsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).ListTeamsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/ListTeamsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).ListTeamsV1(ctx, req.(*ListTeamsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTeamApi_RemoveTeamV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).RemoveTeamV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/RemoveTeamV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).RemoveTeamV1(ctx, req.(*RemoveTeamV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTeamApi_UpdateTeamV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTeamApiServer).UpdateTeamV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.team.api.OcpTeamApi/UpdateTeamV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTeamApiServer).UpdateTeamV1(ctx, req.(*UpdateTeamV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTeamApi_ServiceDesc is the grpc.ServiceDesc for OcpTeamApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTeamApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.team.api.OcpTeamApi",
	HandlerType: (*OcpTeamApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamV1",
			Handler:    _OcpTeamApi_CreateTeamV1_Handler,
		},
		{
			MethodName: "MultiCreateTeamV1",
			Handler:    _OcpTeamApi_MultiCreateTeamV1_Handler,
		},
		{
			MethodName: "GetTeamV1",
			Handler:    _OcpTeamApi_GetTeamV1_Handler,
		},
		{
			MethodName: "ListTeamsV1",
			Handler:    _OcpTeamApi_ListTeamsV1_Handler,
		},
		{
			MethodName: "RemoveTeamV1",
			Handler:    _OcpTeamApi_RemoveTeamV1_Handler,
		},
		{
			MethodName: "UpdateTeamV1",
			Handler:    _OcpTeamApi_UpdateTeamV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-team-api/ocp-team-api.proto",
}
