// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-team-api/internal/repo (interfaces: IRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-team-api/internal/models"
	utils "github.com/ozoncp/ocp-team-api/internal/utils"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CountTeams mocks base method.
func (m *MockIRepo) CountTeams(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTeams", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTeams indicates an expected call of CountTeams.
func (mr *MockIRepoMockRecorder) CountTeams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTeams", reflect.TypeOf((*MockIRepo)(nil).CountTeams), arg0)
}

// CreateTeam mocks base method.
func (m *MockIRepo) CreateTeam(arg0 context.Context, arg1 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockIRepoMockRecorder) CreateTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockIRepo)(nil).CreateTeam), arg0, arg1)
}

// CreateTeams mocks base method.
func (m *MockIRepo) CreateTeams(arg0 context.Context, arg1 []models.Team) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeams", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeams indicates an expected call of CreateTeams.
func (mr *MockIRepoMockRecorder) CreateTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeams", reflect.TypeOf((*MockIRepo)(nil).CreateTeams), arg0, arg1)
}

// GetTeam mocks base method.
func (m *MockIRepo) GetTeam(arg0 context.Context, arg1 uint64) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockIRepoMockRecorder) GetTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockIRepo)(nil).GetTeam), arg0, arg1)
}

// ListTeams mocks base method.
func (m *MockIRepo) ListTeams(arg0 context.Context, arg1, arg2 uint64) ([]models.Team, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Team)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockIRepoMockRecorder) ListTeams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockIRepo)(nil).ListTeams), arg0, arg1, arg2)
}

// RemoveTeam mocks base method.
func (m *MockIRepo) RemoveTeam(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeam indicates an expected call of RemoveTeam.
func (mr *MockIRepoMockRecorder) RemoveTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeam", reflect.TypeOf((*MockIRepo)(nil).RemoveTeam), arg0, arg1)
}

// SearchTeams mocks base method.
func (m *MockIRepo) SearchTeams(arg0 context.Context, arg1 string, arg2 utils.SearchType) ([]models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTeams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTeams indicates an expected call of SearchTeams.
func (mr *MockIRepoMockRecorder) SearchTeams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTeams", reflect.TypeOf((*MockIRepo)(nil).SearchTeams), arg0, arg1, arg2)
}

// UpdateTeam mocks base method.
func (m *MockIRepo) UpdateTeam(arg0 context.Context, arg1 *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockIRepoMockRecorder) UpdateTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockIRepo)(nil).UpdateTeam), arg0, arg1)
}
