syntax = "proto3";

import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

package ocp.team.api;

option go_package = "github.com/ozoncp/ocp-team-api/pkg/ocp-team-api;ocp_team_api";

service OcpTeamApi {

    rpc CreateTeamV1(CreateTeamV1Request) returns (CreateTeamV1Response) {
        option (google.api.http) = {
            post: "/v1/teams",
            body: "*"
        };
    }

    rpc MultiCreateTeamV1(MultiCreateTeamV1Request) returns (MultiCreateTeamV1Response) {
        option (google.api.http) = {
            post: "/v1/teams/collection",
            body: "*"
        };
    }

    rpc GetTeamV1(GetTeamV1Request) returns (GetTeamV1Response) {
        option (google.api.http) = {
            get: "/v1/teams/{id}"
        };
    }

    rpc ListTeamsV1(ListTeamsV1Request) returns (ListTeamsV1Response) {
        option (google.api.http) = {
            get: "/v1/teams"
        };
    }

    rpc RemoveTeamV1(RemoveTeamV1Request) returns (RemoveTeamV1Response) {
        option (google.api.http) = {
            delete: "/v1/teams/{id}"
        };
    }

    rpc UpdateTeamV1(UpdateTeamV1Request) returns (UpdateTeamV1Response) {
        option (google.api.http) = {
            put: "/v1/teams",
            body: "*"
        };
    }
}

message CreateTeamV1Request {
    string name = 1 [(validate.rules).string = {min_len: 3, max_len: 100}];
    string description = 2 [(validate.rules).string = {max_len: 255}];
}

message CreateTeamV1Response {
    uint64 id = 1;
}

message MultiCreateTeamV1Request {
    repeated CreateTeamV1Request teams = 1 [(validate.rules).repeated = {min_items: 2}];
}

message MultiCreateTeamV1Response {
    repeated uint64 ids = 1;
}

message GetTeamV1Request {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message GetTeamV1Response {
    Team team = 1;
}

message ListTeamsV1Request {
    uint64 limit = 1 [(validate.rules).uint64 = {gt: 0, lte: 100}];
    uint64 offset = 2;
}

message ListTeamsV1Response {
    repeated Team teams = 1;
}

message RemoveTeamV1Request {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message RemoveTeamV1Response {}

message UpdateTeamV1Request {
    Team team = 1;
}

message UpdateTeamV1Response {}

message Team {
    uint64 id = 1 [(validate.rules).uint64.gt = 0];
    string name = 2 [(validate.rules).string = {min_len: 3, max_len: 100}];
    string description = 3 [(validate.rules).string = {max_len: 255}];
}